server:
  port: 9010
spring:
  application:
    name: e-commerce-admin
  datasource:
     #  数据库名称，可自定义，可以为多个，以逗号隔开，每个在这里定义的库，都要在下面定义连接属性
    names: master
    default-datasource:
      type: com.alibaba.druid.pool.DruidDataSource
      driverClassName: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://81.68.128.124:3306/jiche_shop?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
      username: shopadm
      password: W1j2y3x4y5.
      maxActive: 50
      initialSize: 10
      maxWait: 60000
      minIdle: 10
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      #是否缓存preparedStatement，也就是PSCache。在mysql下建议关闭。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。
      poolPreparedStatements: false
      #要启用PSCache，-1为关闭 必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true  可以把这个数值配置大一些，比如说100
      maxOpenPreparedStatements: -1
      #配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j2
      #通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      #合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      loginUsername: druid
      loginPassword: druid
  #    sharding:
  #      default-data-source-name: default-datasource
  #      #需要拆分的表，可以设置多个  在 li_order 级别即可
  #      tables:
  #        #需要进行分表的逻辑表名
  #        li_order:
  #          #实际的表结点,下面代表的是li_order_为开头的所有表，如果能确定表的范围例如按月份分表，这里的写法是data2020.li_order_$->{2020..2021}_$->{01..12}  表示例如 li_order_2020_01 li_order_2020_03 li_order_2021_01
  #          actual-data-nodes: data2020.li_order_$->{2019..2021}_$->{01..12}
  #          table-strategy:
  #            # 分表策略，根据创建日期
  #            standard:
  #              sharding-column: create_time
  #              #分表策略
  #              precise-algorithm-class-name: cn.lili.mybatis.sharding.CreateTimeShardingTableAlgorithm
  #              #范围查询实现
  #              range-algorithm-class-name: cn.lili.mybatis.sharding.CreateTimeShardingTableAlgorithm
  redis:
    host: 81.68.128.124 # Redis服务器地址
    database: 1 # Redis数据库索引（默认为0）
    port: 6379 # Redis服务器连接端口
    password: 1qaz2wsx # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 # 连接池中的最大空闲连接
        min-idle: 0 # 连接池中的最小空闲连接
    timeout: 3000ms # 连接超时时间（毫秒）
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka # 你的Eureka Server地址
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ip-address}:${server.port}

mybatis:
  mapper-locations: classpath*:mapper/*.xml

value:
  zuul-uri: "http://localhost:9000"

secure:
  ignored:
    urls: #安全路径白名单
      - /swagger-ui.html
      - /swagger-resources/**
      - /swagger/**
      - /**/v2/api-docs
      - /**/*.js
      - /**/*.css
      - /**/*.png
      - /**/*.ico
      - /webjars/springfox-swagger-ui/**
      - /druid/**
      - /actuator/**
      - /sso/**
      - /home/**
      - /log/generateValidateCode

jwt:
  tokenHeader: Authorization #JWT存储的请求头
  secret: e-commerce-admin #JWT加解密使用的密钥
  expiration: 604800 #JWT的超期限时间(60*60*24)
  tokenHead: Bearer #JWT负载中拿到开头
